syntax = "proto2";

package sensors_data;

// Host Data
message HostData {
  required double time_stamp = 1;

  required double x = 2;
  optional double v_x = 3;
  required double y = 4;
  optional double v_y = 5;
  required double z = 6;
  optional double v_z = 7;

  required double yaw = 8;
  optional double yaw_rate = 9;
  required double pitch = 10;
  optional double pitch_rate = 11;
  required double roll = 12;
  optional double roll_rate = 13;
}

message HostLogData {
  repeated HostData scan_data = 1;
}

// General
message SensorOrigin {
  required double x = 1;
  required double y = 2;
  required double z = 3;

  required double yaw = 4;
  required double pitch = 5;
  required double roll = 6;
}

message SensorOriginStd {
  required double x_std = 1;
  required double y_std = 2;
  required double z_std = 3;

  required double yaw_std = 4;
  required double pitch_std = 5;
  required double roll_std = 6;
}

// Lidar 
message LidarDetecion {
  required int32 id = 1;

  required double x = 2;
  optional double x_std = 3;
  required double y = 4;
  optional double y_std = 5;
  required double z = 6;
  optional double z_std = 7;

  required double range = 8;
  optional double range_std = 9;
  required double azimuth = 10;
  optional double azimuth_std = 11;
  required double elevation = 12;
  optional double elevation_std = 13;

  enum LidarClassification {
    LIDAR_CLASS_GROUND = 0;
    LIDAR_CLASS_OBSTACLE = 1;
    LIDAR_CLASS_MOVING = 2;
    LIDAR_CLASS_UNKNOWN = 3;
  }
  required LidarClassification classification = 14 [default = LIDAR_CLASS_UNKNOWN];
}

message LidarScanData {
  required double time_stamp = 1;
  required SensorOrigin sensor_origin = 2;
  optional SensorOriginStd sensor_origin_std = 3;
  // Detections
  repeated LidarDetecion detections = 4;
}

message LidarLogData {
  repeated LidarScanData scan_data = 1;
}

// Radar
message RadarDetection {
  required int32 id = 1;

  required double x = 2;
  optional double x_std = 3;
  required double y = 4;
  optional double y_std = 5;
  required double z = 6;
  optional double z_std = 7;

  required double range = 8;
  optional double range_std = 9;
  required double azimuth = 10;
  optional double azimuth_std = 11;
  required double elevation = 12;
  optional double elevation_std = 13;

  required double range_rate = 14;
  optional double range_rate_std = 15;

  enum RadarClassification {
    RADAR_CASS_STATIC = 0;
    RADAR_CASS_DYNAMIC = 1;
    RADAR_CASS_UNKNOWN = 2;
  }
  required RadarClassification classification = 16 [default = RADAR_CASS_UNKNOWN];
}

message RadarScanData {
  required double time_stamp = 1;
  required SensorOrigin sensor_origin = 2;
  optional SensorOriginStd sensor_origin_std = 3;
  // Detections
  repeated RadarDetection detections = 4;
}

message RadarLogData {
  repeated RadarScanData scan_data = 1;
}

// Dynamic objects
message Object {
  required int32 id = 1;

  required double x = 2;
  optional double x_std = 3;
  required double y = 4;
  optional double y_std = 5;
  required double vx = 6;
  optional double vx_std = 7;
  required double vy = 8;
  optional double vy_std = 9;

  required double width = 10;
  optional double width_std = 11;
  required double length = 12;
  optional double length_std = 13;

  enum MovementClassification {
    OBJECT_MOVEMENT_CLASS_STATIC = 0;
    OBJECT_MOVEMENT_CLASS_DYNAMIC = 1;
    OBJECT_MOVEMENT_CLASS_UNKNOWN = 2;
  }
  required MovementClassification movement_classification = 14 [default = OBJECT_MOVEMENT_CLASS_UNKNOWN];

  enum ObjectClassification {
    OBJECT_CLASS_UNKNOWN = 0;
    OBJECT_CLASS_CAR = 1;
    OBJECT_CLASS_TRUCK = 2;
    OBJECT_CLASS_PEDESTRIAN = 3;
    OBJECT_CLASS_BIKE = 4;
  }
  required ObjectClassification object_class = 15 [default = OBJECT_CLASS_UNKNOWN];
}

message ObjectsScanData {
  required double time_stamp = 1;
  required SensorOrigin sensor_origin = 2;
  optional SensorOriginStd sensor_origin_std = 3;
  // Detections
  repeated Object detections = 4;
}

message ObjectsLogData {
  repeated ObjectsScanData scan_data = 1;
}